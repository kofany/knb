#
# `which sh` for path
# on linux: /bin/sh
# on freebsd: /usr/local/bin/sh
#

function makefile_main()
{
echo "#
# Code generated by configure
# 
# Warning! All changes made in this file will be lost!
#

default:
	@echo '-+- >> Available targets:'
	@echo '-+- = dynamic (prefered for most systems)'
	@echo '-+- = static'
	@echo '-+- = debug'

dynamic:
	@make -f Makefile.key
	@echo '-+- Making dynamic'
	@make -f Makefile.dynamic

static:
	@make -f Makefile.key
	@echo '-+- Making static'
	@make -f Makefile.static

debug:
	@make -f Makefile.key
	@echo '-+- Making debug'
	@make -f Makefile.debug

release:
	@make -f Makefile.key
	@echo '-+- Making release'
	@make -f Makefile.release

src:
	@echo '-+- Making src'
	@make -f Makefile.src
	
clean:
	@echo '-+- Making clean'
	@make -f Makefile.clean
" > Makefile
}

function makefile_key()
{
echo "#
# Code generated by configure
# 
# Warning! All changes made in this file will be lost!
#

CC = gcc
OUT = key

$TARGET:
	@echo '-+- Making key'
	@echo '-+- Compiling key.c'
	@\$(CC) key.c -o \$(OUT)
	@echo '-+- Genereting key.h'
	@./key 
	@echo '-+- Please remove key.h when you finish compilation' " > Makefile.$TARGET
}

function makefile_up()
{
echo "#
# Code generated by configure
#
# Warning! All changes made in this file will be lost!
#

.SUFFIXES: .c .o

CC = gcc
OUT = $OUT
CFLAGS = $CFLAGS $FLAGS
LFLAGS = $LFLAGS

.c.o:
	@echo '-+- Compiling \$<'
	@\$(CC) -c \$< \$(CFLAGS)

EXE_DEPEND = uf.o \\
cfg.o \\
irc.o \\
md5.o \\
cmds.o \\
http.o \\
match.o \\
queue.o \\
events.o \\
update.o \\
signals.o \\
validate.o \\
functions.o \\
main.o \\

$TARGET: \$(EXE_DEPEND)
	@echo '-+- Linking'
	@\$(CC) \$(EXE_DEPEND) -o \$(OUT) \$(CFLAGS) \$(LFLAGS) "  > Makefile.$TARGET
}

function makefile_done()
{

echo "	@echo '-+- Done'" >> Makefile.$TARGET
}

function makefile_release()
{
echo "	@echo '-+- Creating release'
	@mkdir knb
	@mkdir knb/cfg-examples
	@mkdir knb/scripts
	@cp ../scripts/* knb/scripts
	@cp ../cfg-examples/* knb/cfg-examples
	@cp ../CHANGELOG knb/CHANGELOG
	@cp ../README knb/README
	@echo -+- Striping debug information
	@strip \$(OUT)
	@echo '-+- Building validator'
	@\$(CC) md5.o -o validator validator.c 
	@echo '-+- Patching file'
	@./validator \$(OUT)
	@cp \$(OUT) knb/\$(OUT)
	@ln -s \$(OUT) knb/knb
	@ln -s cfg-examples/conf-ipv4 knb/conf
	@tar -cf \$(OUT).tar knb
	@rm -fr knb
	@rm -fr \$(OUT)
	@gzip -9 -f \$(OUT).tar
	@mv \$(OUT).tar.gz ../\$(OUT).tar.gz" >> Makefile.$TARGET
}

function makefile_world()
{
echo "	@echo -+- Striping debug information
	@strip \$(OUT)
	@echo '-+- Building validator'
	@\$(CC) md5.o -o validator validator.c 
	@echo '-+- Patching file'
	@./validator \$(OUT)

	@mv \$(OUT) ../\$(OUT)
	@rm -fr ../knb 
	@ln -s \$(OUT) ../knb" >> Makefile.$TARGET
}

function makefile_deb()
{
echo "	@echo '-+- Building validator'
	@\$(CC) md5.o -o validator validator.c 
	@echo '-+- Patching file'
	@./validator \$(OUT)
	@mv \$(OUT) ../\$(OUT)
	@rm -fr ../knb 
	@ln -s \$(OUT) ../knb" >> Makefile.$TARGET
}


function makefile_src()
{
    echo "#
# Code generated by configure
#
# Warning! All changes made in this file will be lost!
#    

OUT = knb-$VER-src

$TARGET:
	@echo '-+- Cleaning up'
	@rm -fr knb
	@rm -fr *.o Makefile Makefile.* key.h key
	@echo '-+- Creating struct of files'
	@mkdir knb
	@mkdir knb/src
	@mkdir knb/cfg-examples
	@mkdir knb/scripts
	@cp ../scripts/* knb/scripts
	@cp ../cfg-examples/* knb/cfg-examples
	@cp ../src/configure knb/src/configure
	@cp ../src/configure.sh knb/src/configure.sh
	@cp ../src/*.h knb/src
	@cp ../src/*.c knb/src
	@cp ../CHANGELOG knb/CHANGELOG
	@cp ../README knb/README
	@ln -s cfg-examples/conf-ipv4 knb/conf
	@echo '-+- Creating archive'
	@tar -cf \$(OUT).tar knb/
	@rm -fr knb
	@rm -fr \$(OUT)
	@gzip -9 -f \$(OUT).tar
	@mv \$(OUT).tar.gz ../\$(OUT).tar.gz" > Makefile.$TARGET    
}

function makefile_clean()
{
    echo "#
# Code generated by configure
#
# Warning! All changes made in this file will be lost!
#    

OUT = $OUT

$TARGET:
	@echo '-+- Cleaning up'
	@rm -fr knb *.o validator key.h key Makefile Makefile.* ../knb ../\$(OUT)
#	@rm -fr ../*.uf ../pid.* ../*.log " > Makefile.$TARGET		
    
}

function help()
{
    if [ ! "$UNAME" = "cygwin" ]; then
	echo "-+-  --with-ipv6 - configure with ipv6 enabled (default on)"
	echo "-+-  --without-ipv6 - configure without ipv6"	
    else
	echo "-+-  --with-ipv6 - configure with ipv6 enabled"
	echo "-+-  --without-ipv6 - configure without ipv6 (default on)"	
    fi
	echo "-+-  --without-validator - turn off binary validation on start (default off)"
	echo "-+-  --help - this help ;-P" 
    exit 1
}

function getarg()
{
    IPSET=false
    VALIDSET=false
    VALIDATOR=true
    
    if [ "$ARG2" = "" ]; then
        if [ "$ARG" = "" ]; then
	    if [ "$UNAME" = "cygwin" ]; then
		HAVE_IPV6=false
	    else
		HAVE_IPV6=true
	    fi
	    VALIDATOR=true
	    
	    # check if that wasnt reset
	    IPSET=true
	    VALIDSET=true
	
	else 
	    if [ "$ARG" = "--with-ipv6" ]; then
		HAVE_IPV6=true
		IPSET=true
	    elif [ "$ARG" = "--without-ipv6" ]; then
		HAVE_IPV6=false
		IPSET=true
	    elif [ "$ARG" = "--without-validator" ]; then
		VALIDATOR=false
		VALIDSET=true
		HAVE_IPV6=true
	    else
		help  
	    fi

	fi
    else
	if [ "$ARG2" = "--with-ipv6" ]; then
	    if [ $IPSET = true ]; then
		echo "-+- Duplicated $ARG2 flag"
		exit 1
	    else
		HAVE_IPV6=true
		IPSET=true
	    fi
	elif [ "$ARG2" = "--without-ipv6" ]; then
	    if [ $IPSET = true ]; then
		echo "-+- Duplicated $ARG2 flag"
		exit 1
	    else
		HAVE_IPV6=false
		IPSET=true
	    fi
	elif [ "$ARG2" = "--without-validator" ]; then
	    if [ $VALIDSET = true ]; then
		echo "-+- Duplicated $ARG2 flag"
		exit 1
	    else
		VALIDATOR=false
		VALIDSET=true
	    fi
	else
	    help    
	fi
    fi
}

function make_echo()
{
    echo "-+- Generating Makefile.$TARGET"    
}

function make_me()
{
    makefile_up
    makefile_world
}


function do_dynamic()
{
    make_echo
    FLAGS=""
    make_me
}

function do_static()
{
    make_echo
    FLAGS="-static"
    make_me
}

function do_debug()
{
    make_echo
    FLAGS="-DDEBUG"
    CFLAGS="-Wall"
    makefile_up
    makefile_deb
}

function do_release()
{
    FLAGS="-static"
    if [ HAVE_IPV6 = true ]; then
	CFLAGS="-pipe -O2 -DHAVE_IPV6 -DHAVE_VALIDATOR"
    else
	CFLAGS="-pipe -O2 -DHAVE_VALIDATOR"
    fi
    makefile_up
    makefile_release
}

UNAME=`uname | awk '{ print tolower($1) }'`

# fix names
case $UNAME in
    SunOS) UNAME="sunos";;
    cygwin_*) UNAME="cygwin";;
esac

MACHINE=`uname -m`

VER=`cat defines.h | egrep KNB_VERSION_STR | awk '{ print substr($3, 2, length($3)-2) }'`
VER=`echo -e $VER`
OUT="knb-$VER-$UNAME"
GCC=`gcc -v 2>&1 | tail -1 | awk '{print $3}'`


ARG="$1"
ARG2="$2"

if [ "$UNAME" = "sunos" ]; then 
    $LFLAGS="-lsocket -lnsl"
    $CFLAGS="-DSUNOS -pipe -O2"    
elif [ "$UNAME" = "cygwin" ]; then 
    LFLAGS=""
    CFLAGS="-DWINDOWS -march=$MACHINE -pipe -O2"
else
    LFLAGS=""
    GCCVER=`echo $GCC | sed 's/[.]*//g'`

    if [ $GCCVER -ge 423 ]; then
        CFLAGS="-march=native -pipe -O2"
    else
	CFLAGS="-march=$MACHINE -pipe -O2"
    fi
fi

getarg

echo "-+- Running configure"
echo "-+- Operating system: $UNAME"
echo "-+- Architecture type: $MACHINE"
echo "-+- Gnu C Compiler version: $GCC"
echo -n "-+- IPv6 enabled: "
if [ $HAVE_IPV6 = true ]; then
    echo "yes (./configure --without-ipv6 to turn off)"
    CFLAGS="$CFLAGS -DHAVE_IPV6"
else
    echo "no (./configure --with-ipv6 to trun it on)"
fi
echo -n "-+- Validator enabled: "
if [ $VALIDATOR = true ]; then
    echo "yes (./configure --without-validator to turn off)"
    CFLAGS="$CFLAGS -DHAVE_VALIDATOR"    
else
    echo "no (binary will be unprotected now)"            
fi
echo "-+- Generating Makefile"
makefile_main
for i in "key" "dynamic" "static" "debug" "release" "src" "clean"
do
    TARGET="$i"    
    case $TARGET in
	"key") makefile_key ;;
	"dynamic") do_dynamic ;;
	"static") do_static ;;
	"debug") do_debug ;;
	"release") do_release ;;
	"src") makefile_src ;;
	"clean") makefile_clean ;;
    esac 
    makefile_done
done
echo '-+- Configure is done'
